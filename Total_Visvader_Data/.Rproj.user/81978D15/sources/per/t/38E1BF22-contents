# Single-cell RNA-seq - normalization

# Load libraries
library(Seurat)
library(tidyverse)
library(RCurl)
library(cowplot)

# Normalize the counts
seurat_phase <- NormalizeData(filtered_seurat)

# Create .RData object to load at any time
save(seurat_phase, file="data/seurat_phase.RData")

# Load cell cycle markers
load("data/cycle.rda")

# Score cells for cell cycle
seurat_phase <- CellCycleScoring(seurat_phase, 
                                 g2m.features = g2m_genes, 
                                 s.features = s_genes)

# View cell cycle scores and phases assigned to cells                                 
View(seurat_phase@meta.data)  

# Identify the most variable genes
seurat_phase <- FindVariableFeatures(seurat_phase, 
                                     selection.method = "vst",
                                     nfeatures = 2000, 
                                     verbose = FALSE)

# Scale the counts
seurat_phase <- ScaleData(seurat_phase)

# Create .RData object to load at any time
save(seurat_phase, file="data/seurat_phase_scaled.RData")

# Perform PCA
seurat_phase <- RunPCA(seurat_phase)

# Plot the PCA colored by cell cycle phase
DimPlot(seurat_phase,
        reduction = "pca",
        group.by= "Phase",
        split.by = "Phase")

# Check quartile values
summary(seurat_phase@meta.data$mitoRatio)

# Turn mitoRatio into categorical factor vector based on quartile values
seurat_phase@meta.data$mitoFr <- cut(seurat_phase@meta.data$mitoRatio, 
                                     breaks=c(-Inf, 0.04172, 0.07426, 0.11169, Inf), 
                                     labels=c("Low","Medium","Medium high", "High"))
# Perform PCA
seurat_mito <- RunPCA(seurat_phase)

# Plot the PCA colored by mitochondria mRNA
DimPlot(seurat_mito,
        reduction = "pca",
        group.by= "mitoFr",
        split.by = "mitoFr")

# Split seurat object by condition to perform cell cycle scoring and SCT on all samples
split_seurat <- SplitObject(seurat_phase, split.by = "sample")

split_seurat <- split_seurat[c("308", "031", "069", "161", "176", "337")]

# Create .RData object to load at any time
save(split_seurat, file="data/seurat_split.RData")

# Adjust limit for object sizes
options(future.globals.maxSize = 4000 * 1024^2)

# sctransform on all samples
for (i in 1:length(split_seurat)) {
  split_seurat[[i]] <- SCTransform(split_seurat[[i]], vars.to.regress = c("mitoRatio"))
}

# Check which assays are stored in objects
split_seurat$"308"@assays

# Save the split seurat object
saveRDS(split_seurat, "data/seurat_split_transformed.rds")

# Select the most variable features to use for integration
integ_features <- SelectIntegrationFeatures(object.list = split_seurat, 
                                            nfeatures = 3000) 

# Prepare the SCT list object for integration
split_seurat <- PrepSCTIntegration(object.list = split_seurat, 
                                   anchor.features = integ_features)

# Find best buddies - can take a while to run
integ_anchors <- FindIntegrationAnchors(object.list = split_seurat, 
                                        normalization.method = "SCT", 
                                        anchor.features = integ_features)

# Save the integration anchors
saveRDS(integ_anchors, "data/integ_anchors.rds")

# Integrate across conditions
seurat_integrated <- IntegrateData(anchorset = integ_anchors, 
                                   normalization.method = "SCT")

# Run PCA
seurat_integrated <- RunPCA(object = seurat_integrated)

# Plot PCA
PCAPlot(seurat_integrated,
        split.by = "sample")  

# Run UMAP
seurat_integrated <- RunUMAP(seurat_integrated, 
                             dims = 1:40,
                             reduction = "pca")

# Plot UMAP                             
DimPlot(seurat_integrated)                             

# Plot UMAP split by sample
DimPlot(seurat_integrated,
        split.by = "sample")  

# Save integrated seurat object
saveRDS(seurat_integrated, "results/integrated_seurat.rds")
