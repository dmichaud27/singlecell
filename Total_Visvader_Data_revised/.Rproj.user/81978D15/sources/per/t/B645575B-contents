# December 2021 Visvader Analysis

# Single-cell RNA-seq analysis - QC
# Load libraries
library(SingleCellExperiment)
library(Seurat)
library(tidyverse)
library(Matrix)
library(scales)
library(cowplot)
library(RCurl)

# Read in `matrix.mtx`
counts <- readMM("data/HER2_samples/AH0308/matrix.mtx.gz")

# Read in `genes.tsv`
genes <- read_tsv("data/GSE161529_features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1

# Read in `barcodes.tsv`
cell_ids <- read_tsv("data/HER2_samples/AH0308/barcodes.tsv.gz", col_names = FALSE)$X1

# Make the column names as the cell IDs and the row names as the gene IDs
rownames(counts) <- gene_ids
colnames(counts) <- cell_ids

# Create a Seurat object for each sample
for (file in c("AH0308", "MH0031", "MH0069", "MH0161", "MH0176", "PM0337")){
  seurat_data <- Read10X(data.dir = paste0("data/HER2_samples/", file))
  seurat_obj <- CreateSeuratObject(counts = seurat_data, 
                                   min.features = 100, 
                                   project = file)
  assign(file, seurat_obj)
}

# Check the metadata in the new Seurat objects
head(AH0308@meta.data)
head(MH0031@meta.data)

# Create a merged Seurat object
merged_seurat1 <- merge(x = AH0308, 
                       y = c(MH0031, MH0069, MH0161, MH0176, PM0337),
                       add.cell.id = c("308", "031", "069", "161", "176", "337"))

# Check that the merged object has the appropriate sample-specific prefixes
head(merged_seurat1@meta.data)
tail(merged_seurat1@meta.data)

# Explore merged metadata
View(merged_seurat1@meta.data)

# Add number of genes per UMI for each cell to metadata
merged_seurat1$log10GenesPerUMI <- log10(merged_seurat1$nFeature_RNA) / log10(merged_seurat1$nCount_RNA)

# Explore genes detected per UMI in merged metadata
View(merged_seurat1@meta.data)

# Compute percent mito ratio
merged_seurat1$mitoRatio <- PercentageFeatureSet(object = merged_seurat1, pattern = "^MT-")
merged_seurat1$mitoRatio <- merged_seurat1@meta.data$mitoRatio / 100

# Explore mitochondria reads
View(merged_seurat1@meta.data)

# Create metadata dataframe
metadata <- merged_seurat1@meta.data

# Add cell IDs to metadata
metadata$cells <- rownames(metadata)

# Create sample column
metadata$sample <- NA
metadata$sample[which(str_detect(metadata$cells, "^308_"))] <- "308"
metadata$sample[which(str_detect(metadata$cells, "^031_"))] <- "031"
metadata$sample[which(str_detect(metadata$cells, "^069_"))] <- "069"
metadata$sample[which(str_detect(metadata$cells, "^161_"))] <- "161"
metadata$sample[which(str_detect(metadata$cells, "^176_"))] <- "176"
metadata$sample[which(str_detect(metadata$cells, "^337_"))] <- "337"

# Rename columns
metadata <- metadata %>%
  dplyr::rename(seq_folder = orig.ident,
                nUMI = nCount_RNA,
                nGene = nFeature_RNA)

# View finished metadata
view(metadata)

# Add metadata back to Seurat object
merged_seurat1@meta.data <- metadata

# Create .RData object to load at any time
save(merged_seurat1, file="data/merged_filtered_seurat.RData")

# View Seurat MetaData
view(merged_seurat1@meta.data)

# Visualize the number of cell counts per sample
metadata %>% 
  ggplot(aes(x=sample, fill=sample)) + 
  geom_bar() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells")

# Visualize the number UMIs/transcripts per cell
metadata %>% 
  ggplot(aes(color=sample, x=nUMI, fill= sample)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  geom_vline(xintercept = 500)

# Visualize the distribution of genes detected per cell via histogram
metadata %>% 
  ggplot(aes(color=sample, x=nGene, fill= sample)) + 
  geom_density(alpha = 0.2) + 
  theme_classic() +
  scale_x_log10() + 
  geom_vline(xintercept = 300)

# Visualize the distribution of genes detected per cell via boxplot
metadata %>% 
  ggplot(aes(x=sample, y=log10(nGene), fill=sample)) + 
  geom_boxplot() + 
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells vs NGenes")

# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
metadata %>% 
  ggplot(aes(x=nUMI, y=nGene, color=mitoRatio)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500) +
  geom_hline(yintercept = 250) +
  facet_wrap(~sample)

# Visualize the distribution of mitochondrial gene expression detected per cell
metadata %>% 
  ggplot(aes(color=sample, x=mitoRatio, fill=sample)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  geom_vline(xintercept = 0.2)

# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
metadata %>%
  ggplot(aes(x=log10GenesPerUMI, color = sample, fill=sample)) +
  geom_density(alpha = 0.2) +
  theme_classic() +
  geom_vline(xintercept = 0.8)

# Filter out low quality cells using selected thresholds - these will change with experiment
filtered_seurat <- subset(x = merged_seurat1, 
                          subset= (nUMI >= 500) & 
                            (nGene >= 250) & 
                            (log10GenesPerUMI > 0.80) & 
                            (mitoRatio < 0.20))

# Extract counts
counts <- GetAssayData(object = filtered_seurat, slot = "counts")


# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell
nonzero <- counts > 0

# Sums all TRUE values and returns TRUE if more than 10 TRUE values per gene
keep_genes <- Matrix::rowSums(nonzero) >= 10

# Only keeping those genes expressed in more than 10 cells
filtered_counts <- counts[keep_genes, ]

# Reassign to filtered Seurat object
filtered_seurat <- CreateSeuratObject(filtered_counts, meta.data = filtered_seurat@meta.data)

# Create .RData object to load at any time
save(filtered_seurat, file="data/seurat_filtered.RData")


